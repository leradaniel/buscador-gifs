{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"uMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAiBhD,OACE,sBAAMC,SAZa,SAACC,GAEpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE7BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAE9CN,EAAc,MAIhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SApBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,QAoBnBG,YAAY,8B,+BCrBLC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,iDAGuBC,UAAUH,GAHjC,+DAKFI,MAAMF,GALJ,cAKfG,EALe,gBAMEA,EAAKC,OANP,uBAMbC,EANa,EAMbA,KAGFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAE7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAdjB,kBAkBdM,GAlBc,4CAAH,sDCHTO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACvC,OACE,sBAAKc,UAAW,yCAAhB,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECGb,SAACA,GAAa,MAGdf,mBAAS,CAEjCsB,KAAM,GACNa,SAAS,IAN6B,mBAGjCC,EAHiC,KAG1BC,EAH0B,KA0BxC,OAdAC,qBAAU,WAIRxB,EAAQC,GAAUwB,MAAK,SAACC,GACtBC,YAAW,WACTJ,EAAS,CACPf,KAAMkB,EACNL,SAAS,MAEV,UAEJ,CAACpB,IAEGqB,ED3B2BM,CAAa3B,GAAjCa,EAFyB,EAE/BN,KAAca,EAFiB,EAEjBA,QAEtB,OACE,qCACE,oBAAIJ,UAAW,0CAAf,SAA2DhB,IAE1DoB,GAAW,mBAAGJ,UAAW,mCAAd,qBACZ,qBAAKA,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACC,GAKX,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEUxBiB,EAxBM,WAAM,MAEW3C,mBAAS,IAFpB,mBAElBQ,EAFkB,KAENT,EAFM,KAIzB,OACE,qCACE,gDACA,kDAEA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACGS,EAAWgB,KAAI,SAACT,GAAD,OAId,aAHA,CAGC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MChBxB6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.45c0f004.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n  //Función encargada de manejar cuando se apreta ENTER en la caja de texto\r\n  const handleSubmit = (e) => {\r\n    //Se previene el comportamiento por defecto del formulario (refresh de la pagina)\r\n    e.preventDefault();\r\n    //Validacón: Al menos 2 carácteres\r\n    if (inputValue.trim().length > 2) {\r\n      //Se recibe por parámetro los valores de las categorías y se agrega la nueva:\r\n      setCategories((categories) => [inputValue, ...categories]);\r\n      //Se resetea el valor ingresado:\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n        placeholder=\"Ingrese su búsqueda\"\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\n//Parámetros recibidos obligatorios:\r\nAddCategory.propTypes = {\r\n  //setCategories debe ser una función obligatoria:\r\n  setCategories: PropTypes.func.isRequired,\r\n};","// Los helpers son funciones que hacen un trabajo en específico\r\n// Pueden recibir parámetros, los procesan y devuelven algo.\r\n\r\n//Función asíncrona para hacer peticiones HTTP y traer los gifs.\r\n  //Con el Search Endpoint de la API de Giphy: https://developers.giphy.com/docs/api/endpoint#search\r\n  export const getGifs = async (category) => {\r\n    //Endpoint de una búsqueda (encode reemplaza los espacios y simbolos especiales):\r\n    const url =\r\n      `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=K4yeBra8OiNy7EuURHUin81fZA1TBjoi`;\r\n    //Fetch de los datos de la URL:\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    //Función que rescata solamente los datos que nos interesan en un arreglo:\r\n    const gifs = data.map((img) => {\r\n      //Se devuelve un objeto con los datos que especificamos\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n    //Se devuelve una promesa:\r\n    return gifs;\r\n  };","import React from \"react\";\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <div className={\"card animate__animated animate__zoomIn\"}>\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  //Se llama al hook y se obtiene la data de las imagenes desestructurada:\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className={\"animate__animated animate__bounceInDown\"}>{category}</h3>\r\n      {/* Si se están cargando las imágenes, se muestra un \"Loading\": */}\r\n      {loading && <p className={\"animate__animated animate__flash\"}>Loading</p>}\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => {\r\n          //Se podrían enviar cada una de las propiedades con un spread:\r\n          //Esto permite que no mandemos la img enter.\r\n          //Tampoco que tengamos que mandar cada propiedad por separado.\r\n          //O sea, title= img.title, url = img.url, etc:\r\n          return <GifGridItem key={img.id} {...img} />;\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","//Custom hook.\r\nimport { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n//No hace falta importar React, ya que no suele usarse JSX.\r\n//Tampoco hay un return con todo el código HTML.\r\n\r\nexport const useFetchGifs = (category) => {\r\n  //Los hooks pueden tener estados\r\n  //Indican a otros componente que lo usen que rendericen cuando algo cambió\r\n  const [state, setState] = useState({\r\n    //El estado inicial cuando se use por primera vez este hook es este objeto por defecto:\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  //Si se pone el arreglo de dependencias vacío, solamente se llama una vez al contenido.\r\n  //Al poner \"category\", se ejecuta el efecto cada vez que cambia la categoría.\r\n  //Los efectos no pueden ser async:\r\n  useEffect(() => {\r\n    //Petición HTTP para traer las imágenes\r\n    //Se llama al componente getGifs con la categoría, se recibe las imagenes.\r\n    //Las imagenes recibidas se guardan en la propiedad \"data\" del objeto\r\n    getGifs(category).then((imgs) => {\r\n      setTimeout(() => {\r\n        setState({\r\n          data: imgs,\r\n          loading: false,\r\n        });\r\n      }, 250);\r\n    });\r\n  }, [category]);\r\n\r\n  return state; // {data; [], loading true};\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  //Se crean las categorías con un useState\r\n  const [categories, setCategories] = useState([]);\r\n\r\n  return (\r\n    <>\r\n      <h1>Gif Expert App</h1>\r\n      <h2>Buscador de Gifs</h2>\r\n      {/* Se manda la referencia de setCategories al componente */}\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {categories.map((category) => (\r\n          //Los elementos llevan una id (keys) únicos de bases de datos\r\n          //Cuando se quiere modificar un elemento específicamente, se usa ese id\r\n          //return <li key={category}>{category}</li>;\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}